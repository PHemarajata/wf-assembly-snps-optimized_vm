/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    wf-assembly-snps Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

process {
    // Standard defaults for all processes
    cpus              = { check_max( 1    * task.attempt, 'cpus'     ) }
    memory            = { check_max( 6.GB * task.attempt, 'memory'   ) }
    time              = { check_max( 4.h  * task.attempt, 'time'     ) }

    errorStrategy     = { task.exitStatus in [71,104,134,137,139,140,143,255] ? 'retry' : 'finish' }
    maxRetries        = 3
    maxErrors         = '-1'

    // Process-specific resource requirements - Optimized for GCP VM
    withLabel:process_single {
        cpus          = { check_max( 1                  , 'cpus'     ) }
        memory        = { check_max( 8.GB * task.attempt, 'memory'   ) }
        time          = { check_max( 4.h  * task.attempt, 'time'     ) }
    }
    withLabel:process_low {
        cpus          = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory        = { check_max( 16.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus          = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 48.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus          = { check_max( 24    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 96.GB * task.attempt, 'memory'  ) }
        time          = { check_max( 24.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_long {
        time          = { check_max( 96.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory        = { check_max( 350.GB * task.attempt, 'memory' ) }
    }
    withLabel:process_max {
        cpus          = { check_max( 60    * task.attempt, 'cpus'    ) }
        memory        = { check_max( 380.GB * task.attempt, 'memory' ) }
        time          = { check_max( 48.h   * task.attempt, 'time'   ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
}
